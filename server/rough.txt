import requests
from bs4 import BeautifulSoup

def synonyms(term):
    response = requests.get('https://www.thesaurus.com/browse/{}'.format(term))
    soup = BeautifulSoup(response.text, 'lxml')
    soup.find('section', {'class': 'css-17ofzyv e1ccqdb60'})
    return [span.text for span in soup.findAll('a', {'class': 'css-1kg1yv8 eh475bn0'})] # 'css-1gyuw4i eh475bn0' for less relevant synonyms

word = "happy"
print(synonyms(word))


# WHISPER
def get_duration(filename):
    audio_segment = AudioSegment.from_wav(filename)
    audio_segment.duration_seconds == (len(audio_segment) / 1000.0)
    return round((audio_segment.duration_seconds % 60),3) # in seconds


def split_file_subparts(filename, subpart_duration, ext):
    audio_segment = AudioSegment.from_wav(filename)
    segment_length = subpart_duration * 1000  # pydub works in milliseconds
    audio_chunks = make_chunks(audio_segment, segment_length)

    for i, chunk in enumerate(audio_chunks):
        output_file = f"temp/chunk{i}.{ext}".format(i)
        print("Exporting file", output_file)
        chunk.export(output_file, format=ext)


def convert_to_audio(video_file, audio_file):
    command = ['ffmpeg', '-i', video_file, '-vn', '-acodec', 'mp3', audio_file]
    # subprocess.run(command, check=True)

def transcribe_media(filename):
    transcript = ""
    ext = filename.split('.')[-1]
    # check if file is audio or video
    if ext == 'mp4':
        convert_to_audio(filename, 'audio.mp3')
        os.remove(filename)
        filename = 'audio.mp3'
        ext = 'mp3'
    print("Converting audio to text... Please wait.")

    subpart_duration = 30

    duration = get_duration(filename)
    split_file_subparts(filename, subpart_duration, ext)

    subparts = [f'temp/chunk{i}.{ext}'
                for i in range(int(duration / subpart_duration) + 1)]

    for subpart in subparts:
        if get_duration(subpart) < 2:
            continue
        with open(subpart, "rb") as f:
            data = f.read()
        response = transcribe(data)

        output = response.json()
        transcript = transcript + output['text']
        print(f"{subpart} done")

    os.remove(filename)
    for subpart in subparts:
        os.remove(subpart)

    return transcript


def transcribe_youtube(url):
    # get id of youtube video from url
    print('checking if url is valid...')
    pattern = re.compile(
        r'(?:https://)?(?:www\.)?(?:youtube\.com/watch\?v=|youtu\.be/)([\w-]+)')
    match = pattern.search(url)

    if match:
        print('transcripting video...')
        video_id = match.group(1)
        try:
            transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=['en'])
            formatter = TextFormatter()

            return formatter.format_transcript(transcript).replace('\n', ' ')
        except ValueError as _:
            return "Transcript is not available for this video."
    else:
        return 'Invalid youtube video link..'


def transcribe(data):
    API_URL = "https://api-inference.huggingface.co/models/openai/whisper-base"
    TOKEN = "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"

    headers = {"Authorization": f"Bearer {TOKEN}"}
    response = requests.post(API_URL, headers=headers, data=data)
    return response